{"version":3,"sources":["components/TflLogo.js","components/TflHeader.js","components/TflLine.js","containers/App.js","serviceWorker.js","index.js"],"names":["TflLogo","src","alt","TflHeader","TflLine","this","props","name","color","status","reason","timestamp","className","style","Date","fromDate","getHours","toString","padStart","getMinutes","React","Component","App","getData","Axios","get","process","then","res","setState","tflLines","data","intervalID","setTimeout","bind","catch","err","console","log","state","tflLineColour","bakerloo","central","circle","district","dlr","jubilee","metropolitan","northern","piccadilly","tram","victoria","clearTimeout","map","line","backgroundColor","id","key","lineStatuses","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2UAMeA,EAJC,WACZ,OAAO,yBAAKC,IAAI,sBAAsBC,IAAI,cCG/BC,G,MAFG,kBAAM,gCAAQ,kBAAC,EAAD,SCmBjBC,G,uLAlBD,IAAD,EAC4CC,KAAKC,MAAhDC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,OAAQC,EADtB,EACsBA,OAAQC,EAD9B,EAC8BA,UAEnC,OAEI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cAAcC,MAAQL,GAAQ,4BAAMD,IACnD,yBAAKK,UAAU,aACX,4BAAMH,GAELC,GAAU,2BAAKA,IAEpB,yBAAKE,UAAU,eAAgBD,EAAY,6CAAoB,IAAIG,KAAKH,EAAUI,UAAUC,WAAYC,WAAWC,SAAS,EAAG,KAApF,IAA4F,IAAIJ,KAAKH,EAAUI,UAAUI,aAAcF,WAAWC,SAAS,EAAG,MAAa,oC,GAdhNE,IAAMC,Y,iBCiEbC,G,kBA3Db,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KAWRiB,QAAU,WAGRC,IAAMC,IAAN,wFAFcC,WAEd,oBADeA,qCAEdC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEC,SAAUF,EAAIG,OAE9B,EAAKC,WAAaC,WAAW,EAAKV,QAAQW,KAAb,gBAAyB,QACrDC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAlB5B,EAAKG,MAAQ,CAEXT,SAAU,GAEVU,cAAe,CAAEC,SAAU,UAAWC,QAAS,UAAWC,OAAQ,UAAWC,SAAU,UAAWC,IAAK,UAAW,mBAAoB,UAAWC,QAAS,UAC1J,oBAAqB,UAAYC,aAAc,UAAWC,SAAU,UAAWC,WAAY,UAAWC,KAAM,UAAWC,SAAU,UAAW,gBAAiB,YAP9I,E,iFAyBjB9C,KAAKkB,Y,6CAKL6B,aAAa/C,KAAK2B,c,+BAGV,IAAD,EAC2B3B,KAAKkC,MAAjCT,EADC,EACDA,SAAUU,EADT,EACSA,cAEhB,OACE,6BACE,kBAAC,EAAD,MACA,yBAAK5B,UAAU,kBACdkB,EAASuB,KAAI,SAAAC,GAEZ,IAAI9C,EAAQ,CAAE+C,gBAAiBf,EAAcc,EAAKE,KAClD,OACE,kBAAC,EAAD,CACEC,IAAKH,EAAKE,GACVjD,KAAM+C,EAAK/C,KACXC,MAAOA,EACPC,OAAQ6C,EAAKI,aAAa,GAAlB,0BACRhD,OAAQ4C,EAAKI,aAAa,GAAlB,OACR/C,UAAW2C,EAAKI,aAAa,GAAlB,gBAAwC,c,GArD/CtC,IAAMC,YCMJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdrC,OAAM,SAAAsC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.4dc91434.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TflLogo = () => {\r\n    return <img src=\"assets/tfl_logo.png\" alt=\"tfl logo\" />\r\n}\r\n\r\nexport default TflLogo;","import React from 'react';\r\nimport TflLogo from './TflLogo.js';\r\nimport \"../styles/TflHeader.css\";\r\n\r\nconst TflHeader = () => <header><TflLogo /></header>;\r\n\r\nexport default TflHeader;","import React from 'react';\r\nimport \"../styles/TflLine.css\";\r\n\r\nclass TflLine extends React.Component {\r\n\r\n    render() {\r\n        let { name, color, status, reason, timestamp } = this.props;\r\n        \r\n        return (\r\n            // Each Tfl line is represented by a BS4 card\r\n            <div className=\"card\">\r\n                <div className=\"card-header\" style={ color }><h3>{ name }</h3></div>\r\n                <div className=\"card-body\">\r\n                    <h5>{ status }</h5>\r\n                    {/* If the status reason exists, display it */}\r\n                    {reason && <p>{ reason }</p>}\r\n                </div> \r\n                <div className=\"card-footer\">{ timestamp ? <h6>Last Updated: {(new Date(timestamp.fromDate).getHours()).toString().padStart(2, '0')}:{(new Date(timestamp.fromDate).getMinutes()).toString().padStart(2, '0')}</h6> : <br />}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TflLine;","import React from 'react';\r\nimport TflHeader from '../components/TflHeader';\r\nimport TflLine from '../components/TflLine';\r\nimport Axios from 'axios';\r\nimport '../styles/App.css';\r\n\r\nclass App extends React.Component {\r\n  intervalID;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Stores each tfl line\r\n      tflLines: [],\r\n      // Distinct colour of each line\r\n      tflLineColour: { bakerloo: '#a52a2a', central: '#ff0000', circle: '#ffff00', district: '#008000', dlr: '#20B2AA', \"hammersmith-city\": \"#DB7093\", jubilee: \"#A9A9A9\", \r\n      \"london-overground\": \"#FF8C00\",  metropolitan: \"#800080\", northern: \"#000000\", piccadilly: \"#00008B\", tram: \"#7FFF00\", victoria: \"#00CED1\", \"waterloo-city\": \"#87CEFA\" },\r\n    }\r\n  }\r\n\r\n  // Get the statuses of each Tfl line\r\n  getData = () => {\r\n    const appId = process.env.REACT_APP_ID;\r\n    const appKey = process.env.REACT_APP_KEY;\r\n    Axios.get(`https://api.tfl.gov.uk/Line/Mode/tube%2Cdlr%2Coverground%2Ctram/Status?app_id=${appId}&app_key=${appKey}`)\r\n    .then(res => {\r\n      this.setState({ tflLines: res.data });\r\n      // Every 10secs, refresh the page\r\n      this.intervalID = setTimeout(this.getData.bind(this), 10000);\r\n    }).catch(err => console.log(err));\r\n  }\r\n\r\n  // Getting all Tfl service lines and their line statuses\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  // stop refreshing and making API calls after the component is destroyed.\r\n  componentWillUnmount() {\r\n    clearTimeout(this.intervalID);\r\n  }\r\n\r\n  render() {\r\n    let { tflLines, tflLineColour } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <TflHeader />\r\n        <div className=\"flex-container\">\r\n        {tflLines.map(line => {\r\n          // Color of tfl service line\r\n          let color = { backgroundColor: tflLineColour[line.id] }\r\n          return (\r\n            <TflLine\r\n              key={line.id}\r\n              name={line.name} \r\n              color={color} \r\n              status={line.lineStatuses[0][\"statusSeverityDescription\"]}\r\n              reason={line.lineStatuses[0][\"reason\"]} \r\n              timestamp={line.lineStatuses[0][\"validityPeriods\"][0]} />\r\n            );\r\n        })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './containers/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}